<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (12,450 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (12,449 samples, 99.99%)</title><rect x="10.1" y="419.0" width="1179.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.1" y="430.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/Session.process (12,449 samples, 99.99%)</title><rect x="10.1" y="403.0" width="1179.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.1" y="414.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (12,449 samples, 99.99%)</title><rect x="10.1" y="387.0" width="1179.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.1" y="398.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (12,448 samples, 99.98%)</title><rect x="10.1" y="371.0" width="1179.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.1" y="382.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (10,655 samples, 85.58%)</title><rect x="10.1" y="355.0" width="1009.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.1" y="366.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (10,655 samples, 85.58%)</title><rect x="10.1" y="339.0" width="1009.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.1" y="350.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (10,411 samples, 83.62%)</title><rect x="10.1" y="323.0" width="986.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.1" y="334.0">RequestHandler1_entity.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (644 samples, 5.17%)</title><rect x="10.1" y="307.0" width="61.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="13.1" y="318.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (644 samples, 5.17%)</title><rect x="10.1" y="291.0" width="61.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.1" y="302.0">one/ni..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (448 samples, 3.60%)</title><rect x="10.1" y="275.0" width="42.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.1" y="286.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (448 samples, 3.60%)</title><rect x="10.1" y="259.0" width="42.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.1" y="270.0">one/..</text>
</g>
<g>
<title>byte[] (448 samples, 3.60%)</title><rect x="10.1" y="243.0" width="42.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="13.1" y="254.0">byte[]</text>
</g>
<g>
<title>one/nio/net/Session.write (196 samples, 1.57%)</title><rect x="52.6" y="275.0" width="18.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.6" y="286.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (196 samples, 1.57%)</title><rect x="52.6" y="259.0" width="18.5" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="55.6" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (226 samples, 1.82%)</title><rect x="71.1" y="307.0" width="21.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="74.1" y="318.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (226 samples, 1.82%)</title><rect x="71.1" y="291.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="74.1" y="302.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (226 samples, 1.82%)</title><rect x="71.1" y="275.0" width="21.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="74.1" y="286.0">j..</text>
</g>
<g>
<title>java.lang.String (100 samples, 0.80%)</title><rect x="71.1" y="259.0" width="9.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="74.1" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (126 samples, 1.01%)</title><rect x="80.6" y="259.0" width="12.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="83.6" y="270.0"></text>
</g>
<g>
<title>byte[] (126 samples, 1.01%)</title><rect x="80.6" y="243.0" width="12.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="83.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/service/httprest/HttpRestDemon.entity (9,541 samples, 76.63%)</title><rect x="92.6" y="307.0" width="904.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.6" y="318.0">ru/mail/polis/service/httprest/HttpRestDemon.entity</text>
</g>
<g>
<title>byte[] (9 samples, 0.07%)</title><rect x="92.6" y="291.0" width="0.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="95.6" y="302.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (108 samples, 0.87%)</title><rect x="93.4" y="291.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="96.4" y="302.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (108 samples, 0.87%)</title><rect x="93.4" y="275.0" width="10.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="96.4" y="286.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (108 samples, 0.87%)</title><rect x="93.4" y="259.0" width="10.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.4" y="270.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (108 samples, 0.87%)</title><rect x="93.4" y="243.0" width="10.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.4" y="254.0"></text>
</g>
<g>
<title>byte[] (108 samples, 0.87%)</title><rect x="93.4" y="227.0" width="10.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="96.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (202 samples, 1.62%)</title><rect x="103.6" y="291.0" width="19.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="106.6" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (202 samples, 1.62%)</title><rect x="103.6" y="275.0" width="19.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="106.6" y="286.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (202 samples, 1.62%)</title><rect x="103.6" y="259.0" width="19.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="106.6" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (43 samples, 0.35%)</title><rect x="122.8" y="291.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="125.8" y="302.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (43 samples, 0.35%)</title><rect x="122.8" y="275.0" width="4.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="125.8" y="286.0"></text>
</g>
<g>
<title>one.nio.http.Response (88 samples, 0.71%)</title><rect x="126.9" y="291.0" width="8.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="129.9" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (472 samples, 3.79%)</title><rect x="135.2" y="291.0" width="44.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="138.2" y="302.0">one/..</text>
</g>
<g>
<title>byte[] (180 samples, 1.45%)</title><rect x="135.2" y="275.0" width="17.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="138.2" y="286.0"></text>
</g>
<g>
<title>java.lang.String[] (177 samples, 1.42%)</title><rect x="152.3" y="275.0" width="16.7" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="155.3" y="286.0"></text>
</g>
<g>
<title>java.lang.String (115 samples, 0.92%)</title><rect x="169.0" y="275.0" width="10.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="172.0" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (8,619 samples, 69.23%)</title><rect x="179.9" y="291.0" width="816.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="182.9" y="302.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (970 samples, 7.79%)</title><rect x="179.9" y="275.0" width="92.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.9" y="286.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (970 samples, 7.79%)</title><rect x="179.9" y="259.0" width="92.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="182.9" y="270.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (970 samples, 7.79%)</title><rect x="179.9" y="243.0" width="92.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="182.9" y="254.0">com/google/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (970 samples, 7.79%)</title><rect x="179.9" y="227.0" width="92.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.9" y="238.0">com/google/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (970 samples, 7.79%)</title><rect x="179.9" y="211.0" width="92.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.9" y="222.0">ru/mail/pol..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (586 samples, 4.71%)</title><rect x="179.9" y="195.0" width="55.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="182.9" y="206.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (586 samples, 4.71%)</title><rect x="179.9" y="179.0" width="55.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="182.9" y="190.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (586 samples, 4.71%)</title><rect x="179.9" y="163.0" width="55.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="182.9" y="174.0">ru/ma..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (285 samples, 2.29%)</title><rect x="179.9" y="147.0" width="27.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="182.9" y="158.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (285 samples, 2.29%)</title><rect x="179.9" y="131.0" width="27.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="182.9" y="142.0">c..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (285 samples, 2.29%)</title><rect x="179.9" y="115.0" width="27.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="182.9" y="126.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (109 samples, 0.88%)</title><rect x="179.9" y="99.0" width="10.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="182.9" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTable$1.apply (109 samples, 0.88%)</title><rect x="179.9" y="83.0" width="10.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="182.9" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTable$1.apply (109 samples, 0.88%)</title><rect x="179.9" y="67.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="182.9" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/Cell.of (109 samples, 0.88%)</title><rect x="179.9" y="51.0" width="10.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="182.9" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.persistence.Cell (109 samples, 0.88%)</title><rect x="179.9" y="35.0" width="10.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="182.9" y="46.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (176 samples, 1.41%)</title><rect x="190.3" y="99.0" width="16.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="193.3" y="110.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (176 samples, 1.41%)</title><rect x="190.3" y="83.0" width="16.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="193.3" y="94.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry (117 samples, 0.94%)</title><rect x="190.3" y="67.0" width="11.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="193.3" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (59 samples, 0.47%)</title><rect x="201.4" y="67.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="204.4" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (59 samples, 0.47%)</title><rect x="201.4" y="51.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="204.4" y="62.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (59 samples, 0.47%)</title><rect x="201.4" y="35.0" width="5.6" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="204.4" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTablesPool$$Lambda$67/457817302.apply (301 samples, 2.42%)</title><rect x="207.0" y="147.0" width="28.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="210.0" y="158.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/Cell.getKey (301 samples, 2.42%)</title><rect x="207.0" y="131.0" width="28.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="210.0" y="142.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (301 samples, 2.42%)</title><rect x="207.0" y="115.0" width="28.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="210.0" y="126.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (301 samples, 2.42%)</title><rect x="207.0" y="99.0" width="28.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="210.0" y="110.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/IteratorsTool$$Lambda$70/951375489.apply (384 samples, 3.08%)</title><rect x="235.5" y="195.0" width="36.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="238.5" y="206.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/Cell.getKey (384 samples, 3.08%)</title><rect x="235.5" y="179.0" width="36.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="238.5" y="190.0">ru/..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (384 samples, 3.08%)</title><rect x="235.5" y="163.0" width="36.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="238.5" y="174.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (384 samples, 3.08%)</title><rect x="235.5" y="147.0" width="36.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="238.5" y="158.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (399 samples, 3.20%)</title><rect x="271.9" y="275.0" width="37.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="274.9" y="286.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (399 samples, 3.20%)</title><rect x="271.9" y="259.0" width="37.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.9" y="270.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/LSMDao$$Lambda$79/769204217.apply (399 samples, 3.20%)</title><rect x="271.9" y="243.0" width="37.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="274.9" y="254.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/LSMDao.lambda$iterator$2 (399 samples, 3.20%)</title><rect x="271.9" y="227.0" width="37.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="274.9" y="238.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/Record.of (90 samples, 0.72%)</title><rect x="271.9" y="211.0" width="8.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="274.9" y="222.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (90 samples, 0.72%)</title><rect x="271.9" y="195.0" width="8.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="274.9" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/Cell.getKey (159 samples, 1.28%)</title><rect x="280.4" y="211.0" width="15.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="283.4" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (159 samples, 1.28%)</title><rect x="280.4" y="195.0" width="15.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="283.4" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (159 samples, 1.28%)</title><rect x="280.4" y="179.0" width="15.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="283.4" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/Value.getData (150 samples, 1.20%)</title><rect x="295.5" y="211.0" width="14.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="298.5" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (150 samples, 1.20%)</title><rect x="295.5" y="195.0" width="14.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="298.5" y="206.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (150 samples, 1.20%)</title><rect x="295.5" y="179.0" width="14.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="298.5" y="190.0"></text>
</g>
<g>
<title>java.util.NoSuchElementException (148 samples, 1.19%)</title><rect x="309.7" y="275.0" width="14.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="312.7" y="286.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (2,992 samples, 24.03%)</title><rect x="323.7" y="275.0" width="283.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="326.7" y="286.0">java/util/NoSuchElementException.&lt;init&gt;</text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (2,992 samples, 24.03%)</title><rect x="323.7" y="259.0" width="283.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="326.7" y="270.0">java/lang/RuntimeException.&lt;init&gt;</text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (2,992 samples, 24.03%)</title><rect x="323.7" y="243.0" width="283.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.7" y="254.0">java/lang/Exception.&lt;init&gt;</text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (2,992 samples, 24.03%)</title><rect x="323.7" y="227.0" width="283.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="326.7" y="238.0">java/lang/Throwable.&lt;init&gt;</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2,992 samples, 24.03%)</title><rect x="323.7" y="211.0" width="283.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="326.7" y="222.0">java/lang/Throwable.fillInStackTrace</text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (2,992 samples, 24.03%)</title><rect x="323.7" y="195.0" width="283.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="326.7" y="206.0">java/lang/Throwable.fillInStackTrace</text>
</g>
<g>
<title>int[] (671 samples, 5.39%)</title><rect x="323.7" y="179.0" width="63.6" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="326.7" y="190.0">int[]</text>
</g>
<g>
<title>java.lang.Object[] (795 samples, 6.39%)</title><rect x="387.3" y="179.0" width="75.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="390.3" y="190.0">java.lan..</text>
</g>
<g>
<title>long[] (1,183 samples, 9.50%)</title><rect x="462.7" y="179.0" width="112.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="465.7" y="190.0">long[]</text>
</g>
<g>
<title>short[] (343 samples, 2.76%)</title><rect x="574.8" y="179.0" width="32.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="577.8" y="190.0">sh..</text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (169 samples, 1.36%)</title><rect x="607.3" y="275.0" width="16.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="610.3" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (169 samples, 1.36%)</title><rect x="607.3" y="259.0" width="16.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="610.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (169 samples, 1.36%)</title><rect x="607.3" y="243.0" width="16.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="610.3" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (169 samples, 1.36%)</title><rect x="607.3" y="227.0" width="16.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="610.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (17 samples, 0.14%)</title><rect x="623.3" y="275.0" width="1.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="626.3" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (17 samples, 0.14%)</title><rect x="623.3" y="259.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="626.3" y="270.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (17 samples, 0.14%)</title><rect x="623.3" y="243.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="626.3" y="254.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (17 samples, 0.14%)</title><rect x="623.3" y="227.0" width="1.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="626.3" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/LSMDao.iterator (3,924 samples, 31.52%)</title><rect x="624.9" y="275.0" width="371.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="627.9" y="286.0">ru/mail/polis/dao/persistence/LSMDao.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (79 samples, 0.63%)</title><rect x="624.9" y="259.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="627.9" y="270.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (79 samples, 0.63%)</title><rect x="624.9" y="243.0" width="7.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="627.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/LSMDao.cellIterator (3,845 samples, 30.88%)</title><rect x="632.4" y="259.0" width="364.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="635.4" y="270.0">ru/mail/polis/dao/persistence/LSMDao.cellIterator</text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/IteratorsTool.data (3,845 samples, 30.88%)</title><rect x="632.4" y="243.0" width="364.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.4" y="254.0">ru/mail/polis/dao/persistence/IteratorsTool.data</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (159 samples, 1.28%)</title><rect x="632.4" y="227.0" width="15.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.4" y="238.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (159 samples, 1.28%)</title><rect x="632.4" y="211.0" width="15.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="635.4" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (400 samples, 3.21%)</title><rect x="647.5" y="227.0" width="37.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="650.5" y="238.0">com..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (58 samples, 0.47%)</title><rect x="647.5" y="211.0" width="5.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="650.5" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (342 samples, 2.75%)</title><rect x="653.0" y="211.0" width="32.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="656.0" y="222.0">co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (89 samples, 0.71%)</title><rect x="653.0" y="195.0" width="8.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="656.0" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (70 samples, 0.56%)</title><rect x="661.4" y="195.0" width="6.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="664.4" y="206.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (70 samples, 0.56%)</title><rect x="661.4" y="179.0" width="6.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="664.4" y="190.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (109 samples, 0.88%)</title><rect x="668.1" y="195.0" width="10.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="671.1" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (74 samples, 0.59%)</title><rect x="678.4" y="195.0" width="7.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="681.4" y="206.0"></text>
</g>
<g>
<title>java.lang.Object[] (74 samples, 0.59%)</title><rect x="678.4" y="179.0" width="7.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="681.4" y="190.0"></text>
</g>
<g>
<title>java.util.ArrayList (138 samples, 1.11%)</title><rect x="685.4" y="227.0" width="13.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="688.4" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (262 samples, 2.10%)</title><rect x="698.5" y="227.0" width="24.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="701.5" y="238.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.add (262 samples, 2.10%)</title><rect x="698.5" y="211.0" width="24.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="701.5" y="222.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.grow (262 samples, 2.10%)</title><rect x="698.5" y="195.0" width="24.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="701.5" y="206.0">j..</text>
</g>
<g>
<title>java/util/ArrayList.grow (262 samples, 2.10%)</title><rect x="698.5" y="179.0" width="24.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="701.5" y="190.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOf (262 samples, 2.10%)</title><rect x="698.5" y="163.0" width="24.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="701.5" y="174.0">j..</text>
</g>
<g>
<title>java.lang.Object[] (262 samples, 2.10%)</title><rect x="698.5" y="147.0" width="24.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="701.5" y="158.0">j..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (689 samples, 5.53%)</title><rect x="723.3" y="227.0" width="65.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="726.3" y="238.0">ru/mail..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (92 samples, 0.74%)</title><rect x="723.3" y="211.0" width="8.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="726.3" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (597 samples, 4.80%)</title><rect x="732.0" y="211.0" width="56.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="735.0" y="222.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (597 samples, 4.80%)</title><rect x="732.0" y="195.0" width="56.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="735.0" y="206.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (597 samples, 4.80%)</title><rect x="732.0" y="179.0" width="56.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="735.0" y="190.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (597 samples, 4.80%)</title><rect x="732.0" y="163.0" width="56.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="735.0" y="174.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (253 samples, 2.03%)</title><rect x="732.0" y="147.0" width="24.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="735.0" y="158.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (253 samples, 2.03%)</title><rect x="732.0" y="131.0" width="24.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="735.0" y="142.0">c..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (253 samples, 2.03%)</title><rect x="732.0" y="115.0" width="24.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="735.0" y="126.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (119 samples, 0.96%)</title><rect x="732.0" y="99.0" width="11.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="735.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTable$1.apply (119 samples, 0.96%)</title><rect x="732.0" y="83.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="735.0" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTable$1.apply (119 samples, 0.96%)</title><rect x="732.0" y="67.0" width="11.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="735.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/Cell.of (119 samples, 0.96%)</title><rect x="732.0" y="51.0" width="11.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="735.0" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.persistence.Cell (119 samples, 0.96%)</title><rect x="732.0" y="35.0" width="11.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="735.0" y="46.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (134 samples, 1.08%)</title><rect x="743.3" y="99.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="746.3" y="110.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (134 samples, 1.08%)</title><rect x="743.3" y="83.0" width="12.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="746.3" y="94.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry (69 samples, 0.55%)</title><rect x="743.3" y="67.0" width="6.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="746.3" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (65 samples, 0.52%)</title><rect x="749.8" y="67.0" width="6.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.8" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (65 samples, 0.52%)</title><rect x="749.8" y="51.0" width="6.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="752.8" y="62.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (65 samples, 0.52%)</title><rect x="749.8" y="35.0" width="6.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="752.8" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTablesPool$$Lambda$67/457817302.apply (344 samples, 2.76%)</title><rect x="756.0" y="147.0" width="32.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="759.0" y="158.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/Cell.getKey (344 samples, 2.76%)</title><rect x="756.0" y="131.0" width="32.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.0" y="142.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (344 samples, 2.76%)</title><rect x="756.0" y="115.0" width="32.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="759.0" y="126.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBufferR (344 samples, 2.76%)</title><rect x="756.0" y="99.0" width="32.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="759.0" y="110.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTablesPool.iterator (2,197 samples, 17.65%)</title><rect x="788.6" y="227.0" width="208.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.6" y="238.0">ru/mail/polis/dao/persisten..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (371 samples, 2.98%)</title><rect x="788.6" y="211.0" width="35.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.6" y="222.0">com..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (50 samples, 0.40%)</title><rect x="788.6" y="195.0" width="4.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="791.6" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (321 samples, 2.58%)</title><rect x="793.3" y="195.0" width="30.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="796.3" y="206.0">co..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (82 samples, 0.66%)</title><rect x="793.3" y="179.0" width="7.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="796.3" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (57 samples, 0.46%)</title><rect x="801.1" y="179.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="804.1" y="190.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (57 samples, 0.46%)</title><rect x="801.1" y="163.0" width="5.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="804.1" y="174.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (99 samples, 0.80%)</title><rect x="806.5" y="179.0" width="9.4" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="809.5" y="190.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (83 samples, 0.67%)</title><rect x="815.9" y="179.0" width="7.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="818.9" y="190.0"></text>
</g>
<g>
<title>java.lang.Object[] (83 samples, 0.67%)</title><rect x="815.9" y="163.0" width="7.9" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="818.9" y="174.0"></text>
</g>
<g>
<title>java.util.ArrayList (104 samples, 0.84%)</title><rect x="823.8" y="211.0" width="9.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="826.8" y="222.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (109 samples, 0.88%)</title><rect x="833.6" y="211.0" width="10.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="836.6" y="222.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (109 samples, 0.88%)</title><rect x="833.6" y="195.0" width="10.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.6" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (109 samples, 0.88%)</title><rect x="833.6" y="179.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="836.6" y="190.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (109 samples, 0.88%)</title><rect x="833.6" y="163.0" width="10.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="836.6" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (180 samples, 1.45%)</title><rect x="844.0" y="211.0" width="17.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="847.0" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (180 samples, 1.45%)</title><rect x="844.0" y="195.0" width="17.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="847.0" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (500 samples, 4.02%)</title><rect x="861.2" y="211.0" width="47.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="864.2" y="222.0">ru/m..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (293 samples, 2.35%)</title><rect x="861.2" y="195.0" width="27.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="864.2" y="206.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (207 samples, 1.66%)</title><rect x="889.0" y="195.0" width="19.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="892.0" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (207 samples, 1.66%)</title><rect x="889.0" y="179.0" width="19.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="892.0" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (207 samples, 1.66%)</title><rect x="889.0" y="163.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="892.0" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (207 samples, 1.66%)</title><rect x="889.0" y="147.0" width="19.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="892.0" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (100 samples, 0.80%)</title><rect x="889.0" y="131.0" width="9.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="892.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTable$1.apply (100 samples, 0.80%)</title><rect x="889.0" y="115.0" width="9.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="892.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTable$1.apply (100 samples, 0.80%)</title><rect x="889.0" y="99.0" width="9.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="892.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/Cell.of (100 samples, 0.80%)</title><rect x="889.0" y="83.0" width="9.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="892.0" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.persistence.Cell (100 samples, 0.80%)</title><rect x="889.0" y="67.0" width="9.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="892.0" y="78.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (107 samples, 0.86%)</title><rect x="898.5" y="131.0" width="10.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="901.5" y="142.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.next (107 samples, 0.86%)</title><rect x="898.5" y="115.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="901.5" y="126.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$UnmodifiableEntry (48 samples, 0.39%)</title><rect x="898.5" y="99.0" width="4.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="901.5" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (59 samples, 0.47%)</title><rect x="903.0" y="99.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="906.0" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (59 samples, 0.47%)</title><rect x="903.0" y="83.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="906.0" y="94.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (59 samples, 0.47%)</title><rect x="903.0" y="67.0" width="5.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="906.0" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/persistence/MemTable.iterator (931 samples, 7.48%)</title><rect x="908.6" y="211.0" width="88.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.6" y="222.0">ru/mail/po..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (226 samples, 1.82%)</title><rect x="908.6" y="195.0" width="21.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.6" y="206.0">c..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (226 samples, 1.82%)</title><rect x="908.6" y="179.0" width="21.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="911.6" y="190.0">c..</text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet.iterator (202 samples, 1.62%)</title><rect x="930.0" y="195.0" width="19.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="933.0" y="206.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet$1 (86 samples, 0.69%)</title><rect x="930.0" y="179.0" width="8.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="933.0" y="190.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap$UnmodifiableEntrySet$1.&lt;init&gt; (116 samples, 0.93%)</title><rect x="938.2" y="179.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="941.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (116 samples, 0.93%)</title><rect x="938.2" y="163.0" width="11.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="941.2" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (116 samples, 0.93%)</title><rect x="938.2" y="147.0" width="11.0" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="941.2" y="158.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.entrySet (119 samples, 0.96%)</title><rect x="949.2" y="195.0" width="11.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="952.2" y="206.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableMap$UnmodifiableEntrySet (66 samples, 0.53%)</title><rect x="949.2" y="179.0" width="6.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="952.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (53 samples, 0.43%)</title><rect x="955.4" y="179.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="958.4" y="190.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (53 samples, 0.43%)</title><rect x="955.4" y="163.0" width="5.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="958.4" y="174.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableSortedMap.tailMap (332 samples, 2.67%)</title><rect x="960.4" y="195.0" width="31.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="963.4" y="206.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (332 samples, 2.67%)</title><rect x="960.4" y="179.0" width="31.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="963.4" y="190.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (332 samples, 2.67%)</title><rect x="960.4" y="163.0" width="31.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="963.4" y="174.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (332 samples, 2.67%)</title><rect x="960.4" y="147.0" width="31.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="963.4" y="158.0">ja..</text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (332 samples, 2.67%)</title><rect x="960.4" y="131.0" width="31.5" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="963.4" y="142.0">ja..</text>
</g>
<g>
<title>ru.mail.polis.dao.persistence.MemTable$1 (52 samples, 0.42%)</title><rect x="991.9" y="195.0" width="4.9" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="994.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (244 samples, 1.96%)</title><rect x="996.8" y="323.0" width="23.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="999.8" y="334.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (244 samples, 1.96%)</title><rect x="996.8" y="307.0" width="23.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="999.8" y="318.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (244 samples, 1.96%)</title><rect x="996.8" y="291.0" width="23.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="999.8" y="302.0">j..</text>
</g>
<g>
<title>java.lang.String (94 samples, 0.76%)</title><rect x="996.8" y="275.0" width="8.9" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="999.8" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (150 samples, 1.20%)</title><rect x="1005.7" y="275.0" width="14.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1008.7" y="286.0"></text>
</g>
<g>
<title>byte[] (150 samples, 1.20%)</title><rect x="1005.7" y="259.0" width="14.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1008.7" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (1,218 samples, 9.78%)</title><rect x="1020.0" y="355.0" width="115.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1023.0" y="366.0">one/nio/http/H..</text>
</g>
<g>
<title>one.nio.http.Request (200 samples, 1.61%)</title><rect x="1020.0" y="339.0" width="18.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1023.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (350 samples, 2.81%)</title><rect x="1038.9" y="339.0" width="33.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1041.9" y="350.0">on..</text>
</g>
<g>
<title>java.lang.String[] (350 samples, 2.81%)</title><rect x="1038.9" y="323.0" width="33.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1041.9" y="334.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (668 samples, 5.37%)</title><rect x="1072.1" y="339.0" width="63.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1075.1" y="350.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (668 samples, 5.37%)</title><rect x="1072.1" y="323.0" width="63.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1075.1" y="334.0">one/nio..</text>
</g>
<g>
<title>char[] (382 samples, 3.07%)</title><rect x="1072.1" y="307.0" width="36.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="1075.1" y="318.0">cha..</text>
</g>
<g>
<title>java.lang.String (112 samples, 0.90%)</title><rect x="1108.3" y="307.0" width="10.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1111.3" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (174 samples, 1.40%)</title><rect x="1118.9" y="307.0" width="16.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1121.9" y="318.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (174 samples, 1.40%)</title><rect x="1118.9" y="291.0" width="16.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1121.9" y="302.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (174 samples, 1.40%)</title><rect x="1118.9" y="275.0" width="16.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1121.9" y="286.0"></text>
</g>
<g>
<title>byte[] (174 samples, 1.40%)</title><rect x="1118.9" y="259.0" width="16.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1121.9" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (575 samples, 4.62%)</title><rect x="1135.4" y="355.0" width="54.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1138.4" y="366.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (575 samples, 4.62%)</title><rect x="1135.4" y="339.0" width="54.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1138.4" y="350.0">one/n..</text>
</g>
<g>
<title>char[] (306 samples, 2.46%)</title><rect x="1135.4" y="323.0" width="29.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1138.4" y="334.0">ch..</text>
</g>
<g>
<title>java.lang.String (104 samples, 0.84%)</title><rect x="1164.4" y="323.0" width="9.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1167.4" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (165 samples, 1.33%)</title><rect x="1174.3" y="323.0" width="15.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1177.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (165 samples, 1.33%)</title><rect x="1174.3" y="307.0" width="15.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1177.3" y="318.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (165 samples, 1.33%)</title><rect x="1174.3" y="291.0" width="15.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1177.3" y="302.0"></text>
</g>
<g>
<title>byte[] (165 samples, 1.33%)</title><rect x="1174.3" y="275.0" width="15.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1177.3" y="286.0"></text>
</g>
</g>
</svg>
